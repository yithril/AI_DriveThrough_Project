name: Deploy AI DriveThru

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || contains(github.event.pull_request.changed_files, 'backend/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push backend image to Amazon ECR
      working-directory: ./backend
      run: |
        # Get ECR repository URI
        ECR_REPO=$(aws ecr describe-repositories --repository-names ai-drivethru-backend --query 'repositories[0].repositoryUri' --output text)
        
        # Build and tag the image
        docker build -t $ECR_REPO:latest .
        docker tag $ECR_REPO:latest $ECR_REPO:$GITHUB_SHA
        
        # Push the image
        docker push $ECR_REPO:latest
        docker push $ECR_REPO:$GITHUB_SHA
        
        echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV
    
    - name: Update ECS service
      run: |
        # Force new deployment to pick up the latest image
        aws ecs update-service \
          --cluster ai-drivethru-cluster \
          --service ai-drivethru-backend-service \
          --force-new-deployment
    
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster ai-drivethru-cluster \
          --services ai-drivethru-backend-service
    
    - name: Get backend URL
      run: |
        # Get the public IP of the ECS task
        TASK_ARN=$(aws ecs list-tasks --cluster ai-drivethru-cluster --service-name ai-drivethru-backend-service --query 'taskArns[0]' --output text)
        PUBLIC_IP=$(aws ecs describe-tasks --cluster ai-drivethru-cluster --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs -I {} aws ec2 describe-network-interfaces --network-interface-ids {} --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        echo "Backend URL: http://${PUBLIC_IP}:8000"
        echo "BACKEND_URL=http://${PUBLIC_IP}:8000" >> $GITHUB_ENV

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.event_name == 'push' || contains(github.event.pull_request.changed_files, 'frontend/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Get backend URL from previous job
      id: get-backend-url
      run: |
        # Get the backend URL from the previous job or from AWS
        if [ -n "${{ needs.deploy-backend.outputs.BACKEND_URL }}" ]; then
          BACKEND_URL="${{ needs.deploy-backend.outputs.BACKEND_URL }}"
        else
          # Get the public IP of the ECS task
          TASK_ARN=$(aws ecs list-tasks --cluster ai-drivethru-cluster --service-name ai-drivethru-backend-service --query 'taskArns[0]' --output text)
          PUBLIC_IP=$(aws ecs describe-tasks --cluster ai-drivethru-cluster --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs -I {} aws ec2 describe-network-interfaces --network-interface-ids {} --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          BACKEND_URL="http://${PUBLIC_IP}:8000"
        fi
        echo "NEXT_PUBLIC_API_URL=${BACKEND_URL}" >> $GITHUB_ENV
        echo "Backend URL: ${BACKEND_URL}"
    
    - name: Build frontend
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
      run: npm run build
    
    - name: Deploy to S3
      run: |
        aws s3 sync frontend/out s3://ai-drivethru-frontend --delete
        aws s3 cp s3://ai-drivethru-frontend/index.html s3://ai-drivethru-frontend/ --metadata-directive REPLACE --cache-control "max-age=0, no-cache, no-store, must-revalidate" --content-type "text/html"
    
    - name: Get deployment URLs
      run: |
        echo "🌐 Frontend deployed to S3 bucket: ai-drivethru-frontend"
        echo "🔗 Frontend URL: https://ai-drivethru-frontend.s3-website.us-east-2.amazonaws.com"
        echo "🔗 Backend URL: ${{ env.NEXT_PUBLIC_API_URL }}"