"""next migration

Revision ID: 27469c216978
Revises: 
Create Date: 2025-09-18 00:29:38.478103

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '27469c216978'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('restaurants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Restaurant name - required, max 100 characters'),
    sa.Column('logo_url', sa.String(length=255), nullable=True, comment='URL to restaurant logo image'),
    sa.Column('primary_color', sa.String(length=7), nullable=True, comment='Primary brand color in hex format'),
    sa.Column('secondary_color', sa.String(length=7), nullable=True, comment='Secondary brand color in hex format'),
    sa.Column('description', sa.Text(), nullable=True, comment='Restaurant description'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Whether the restaurant is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the restaurant was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='When the restaurant was last updated'),
    sa.CheckConstraint("primary_color ~ '^#[0-9A-Fa-f]{6}$'", name='ck_restaurant_primary_color_format'),
    sa.CheckConstraint("secondary_color ~ '^#[0-9A-Fa-f]{6}$'", name='ck_restaurant_secondary_color_format'),
    sa.CheckConstraint('length(name) >= 2', name='ck_restaurant_name_min_length'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_restaurants_id'), 'restaurants', ['id'], unique=False)
    op.create_index(op.f('ix_restaurants_name'), 'restaurants', ['name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False, comment='User email address - required, unique'),
    sa.Column('phone', sa.String(length=20), nullable=True, comment='User phone number - optional'),
    sa.Column('first_name', sa.String(length=50), nullable=True, comment='User first name - optional'),
    sa.Column('last_name', sa.String(length=50), nullable=True, comment='User last name - optional'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Whether the user account is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the user account was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='When the user account was last updated'),
    sa.CheckConstraint("email ~ '^[A-Za-z0-9._%%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'", name='ck_user_email_format'),
    sa.CheckConstraint('length(email) >= 5', name='ck_user_email_min_length'),
    sa.CheckConstraint('length(first_name) >= 2 OR first_name IS NULL', name='ck_user_first_name_min_length'),
    sa.CheckConstraint('length(last_name) >= 2 OR last_name IS NULL', name='ck_user_last_name_min_length'),
    sa.CheckConstraint('length(phone) >= 10 OR phone IS NULL', name='ck_user_phone_min_length'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index('ix_users_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_phone'), 'users', ['phone'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False, comment='Category name - required, max 50 characters'),
    sa.Column('description', sa.String(length=255), nullable=True, comment='Category description - max 255 characters'),
    sa.Column('restaurant_id', sa.Integer(), nullable=False, comment='Reference to restaurant'),
    sa.Column('display_order', sa.Integer(), nullable=True, comment='Order for displaying categories'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Whether the category is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the category was created'),
    sa.CheckConstraint('display_order >= 0', name='ck_category_display_order_positive'),
    sa.CheckConstraint('length(name) >= 2', name='ck_category_name_min_length'),
    sa.CheckConstraint('true', name='ck_category_unique_name_per_restaurant'),
    sa.ForeignKeyConstraint(['restaurant_id'], ['restaurants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=False)
    op.create_index(op.f('ix_categories_restaurant_id'), 'categories', ['restaurant_id'], unique=False)
    op.create_table('ingredients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Ingredient name - required, max 100 characters'),
    sa.Column('description', sa.String(length=255), nullable=True, comment='Ingredient description'),
    sa.Column('restaurant_id', sa.Integer(), nullable=False, comment='Reference to restaurant'),
    sa.Column('is_allergen', sa.Boolean(), nullable=True, comment='Whether this ingredient is a common allergen'),
    sa.Column('allergen_type', sa.String(length=50), nullable=True, comment='Type of allergen (nuts, dairy, gluten, etc.)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the ingredient was created'),
    sa.CheckConstraint('length(description) >= 5 OR description IS NULL', name='ck_ingredient_description_min_length'),
    sa.CheckConstraint('length(name) >= 2', name='ck_ingredient_name_min_length'),
    sa.CheckConstraint('true', name='ck_ingredient_unique_name_per_restaurant'),
    sa.ForeignKeyConstraint(['restaurant_id'], ['restaurants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ingredients_id'), 'ingredients', ['id'], unique=False)
    op.create_index(op.f('ix_ingredients_name'), 'ingredients', ['name'], unique=False)
    op.create_index(op.f('ix_ingredients_restaurant_id'), 'ingredients', ['restaurant_id'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_name', sa.String(length=100), nullable=True, comment='Customer name - optional for anonymous orders'),
    sa.Column('customer_phone', sa.String(length=20), nullable=True, comment='Customer phone number - optional'),
    sa.Column('user_id', sa.Integer(), nullable=True, comment='Reference to registered user - optional'),
    sa.Column('restaurant_id', sa.Integer(), nullable=False, comment='Reference to restaurant'),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'PREPARING', 'READY', 'COMPLETED', 'CANCELLED', name='orderstatus'), nullable=False, comment='Current order status'),
    sa.Column('subtotal', sa.Numeric(precision=10, scale=2), nullable=False, comment='Subtotal before tax'),
    sa.Column('tax_amount', sa.Numeric(precision=10, scale=2), nullable=True, comment='Tax amount'),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total amount including tax'),
    sa.Column('special_instructions', sa.Text(), nullable=True, comment='Special instructions for the order'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the order was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='When the order was last updated'),
    sa.CheckConstraint('length(customer_name) >= 2 OR customer_name IS NULL', name='ck_order_customer_name_min_length'),
    sa.CheckConstraint('length(customer_phone) >= 10 OR customer_phone IS NULL', name='ck_order_customer_phone_min_length'),
    sa.CheckConstraint('subtotal >= 0', name='ck_order_subtotal_positive'),
    sa.CheckConstraint('tax_amount >= 0', name='ck_order_tax_positive'),
    sa.CheckConstraint('total_amount >= 0', name='ck_order_total_positive'),
    sa.CheckConstraint('total_amount >= subtotal', name='ck_order_total_ge_subtotal'),
    sa.ForeignKeyConstraint(['restaurant_id'], ['restaurants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_orders_restaurant_id'), 'orders', ['restaurant_id'], unique=False)
    op.create_index(op.f('ix_orders_user_id'), 'orders', ['user_id'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False, comment='Tag name - required, max 50 characters'),
    sa.Column('color', sa.String(length=7), nullable=True, comment='Tag color in hex format'),
    sa.Column('restaurant_id', sa.Integer(), nullable=False, comment='Reference to restaurant'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the tag was created'),
    sa.CheckConstraint("color ~ '^#[0-9A-Fa-f]{6}$'", name='ck_tag_color_format'),
    sa.CheckConstraint('length(name) >= 2', name='ck_tag_name_min_length'),
    sa.CheckConstraint('true', name='ck_tag_unique_name_per_restaurant'),
    sa.ForeignKeyConstraint(['restaurant_id'], ['restaurants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=False)
    op.create_index(op.f('ix_tags_restaurant_id'), 'tags', ['restaurant_id'], unique=False)
    op.create_table('inventory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ingredient_id', sa.Integer(), nullable=False, comment='Reference to ingredient'),
    sa.Column('current_stock', sa.Numeric(precision=10, scale=2), nullable=False, comment='Current stock quantity'),
    sa.Column('min_stock_level', sa.Numeric(precision=10, scale=2), nullable=False, comment='Minimum stock level before reorder alert'),
    sa.Column('max_stock_level', sa.Numeric(precision=10, scale=2), nullable=True, comment='Maximum stock level for ordering'),
    sa.Column('unit', sa.String(length=20), nullable=False, comment='Unit of measurement (pieces, oz, lbs, etc.)'),
    sa.Column('cost_per_unit', sa.Numeric(precision=10, scale=2), nullable=True, comment='Cost per unit for inventory valuation'),
    sa.Column('supplier', sa.String(length=100), nullable=True, comment='Supplier name'),
    sa.Column('supplier_contact', sa.String(length=100), nullable=True, comment='Supplier contact information'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Whether this inventory item is active'),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the inventory was last updated'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the inventory record was created'),
    sa.CheckConstraint('cost_per_unit IS NULL OR cost_per_unit >= 0', name='ck_inventory_cost_per_unit_positive'),
    sa.CheckConstraint('current_stock >= 0', name='ck_inventory_current_stock_positive'),
    sa.CheckConstraint('length(unit) <= 20', name='ck_inventory_unit_max_length'),
    sa.CheckConstraint('length(unit) >= 1', name='ck_inventory_unit_min_length'),
    sa.CheckConstraint('max_stock_level IS NULL OR max_stock_level >= min_stock_level', name='ck_inventory_max_stock_gte_min'),
    sa.CheckConstraint('min_stock_level >= 0', name='ck_inventory_min_stock_positive'),
    sa.CheckConstraint('true', name='ck_inventory_unique_per_ingredient'),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inventory_id'), 'inventory', ['id'], unique=False)
    op.create_index(op.f('ix_inventory_ingredient_id'), 'inventory', ['ingredient_id'], unique=False)
    op.create_table('menu_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Menu item name - required, max 100 characters'),
    sa.Column('description', sa.Text(), nullable=True, comment='Menu item description'),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Menu item price - required, max 99999999.99'),
    sa.Column('image_url', sa.String(length=255), nullable=True, comment='URL to menu item image'),
    sa.Column('category_id', sa.Integer(), nullable=False, comment='Reference to category'),
    sa.Column('restaurant_id', sa.Integer(), nullable=False, comment='Reference to restaurant'),
    sa.Column('is_available', sa.Boolean(), nullable=True, comment='Whether the menu item is available for ordering'),
    sa.Column('is_upsell', sa.Boolean(), nullable=True, comment='Whether this item should be suggested for upselling'),
    sa.Column('prep_time_minutes', sa.Integer(), nullable=True, comment='Estimated preparation time in minutes'),
    sa.Column('display_order', sa.Integer(), nullable=True, comment='Order for displaying menu items within category'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the menu item was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='When the menu item was last updated'),
    sa.CheckConstraint('display_order >= 0', name='ck_menu_item_display_order_positive'),
    sa.CheckConstraint('length(name) >= 2', name='ck_menu_item_name_min_length'),
    sa.CheckConstraint('prep_time_minutes <= 120', name='ck_menu_item_prep_time_max'),
    sa.CheckConstraint('prep_time_minutes >= 1', name='ck_menu_item_prep_time_min'),
    sa.CheckConstraint('price <= 999999.99', name='ck_menu_item_price_max'),
    sa.CheckConstraint('price >= 0', name='ck_menu_item_price_positive'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['restaurant_id'], ['restaurants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_menu_items_category_id'), 'menu_items', ['category_id'], unique=False)
    op.create_index(op.f('ix_menu_items_id'), 'menu_items', ['id'], unique=False)
    op.create_index(op.f('ix_menu_items_name'), 'menu_items', ['name'], unique=False)
    op.create_index(op.f('ix_menu_items_restaurant_id'), 'menu_items', ['restaurant_id'], unique=False)
    op.create_table('menu_item_ingredients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('menu_item_id', sa.Integer(), nullable=False, comment='Reference to menu item'),
    sa.Column('ingredient_id', sa.Integer(), nullable=False, comment='Reference to ingredient'),
    sa.Column('quantity', sa.Numeric(precision=8, scale=2), nullable=False, comment='Quantity of ingredient (e.g., 1.0, 2.5)'),
    sa.Column('unit', sa.String(length=20), nullable=False, comment='Unit of measurement (pieces, oz, cups, lbs, etc.)'),
    sa.Column('is_optional', sa.Boolean(), nullable=True, comment="Whether this ingredient is optional (e.g., 'extra cheese')"),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the menu item ingredient was created'),
    sa.CheckConstraint('length(unit) <= 20', name='ck_menu_item_ingredient_unit_max_length'),
    sa.CheckConstraint('length(unit) >= 1', name='ck_menu_item_ingredient_unit_min_length'),
    sa.CheckConstraint('quantity <= 1000', name='ck_menu_item_ingredient_quantity_max'),
    sa.CheckConstraint('quantity > 0', name='ck_menu_item_ingredient_quantity_positive'),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['menu_item_id'], ['menu_items.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('menu_item_id', 'ingredient_id', name='uq_menu_item_ingredient')
    )
    op.create_index(op.f('ix_menu_item_ingredients_id'), 'menu_item_ingredients', ['id'], unique=False)
    op.create_index(op.f('ix_menu_item_ingredients_ingredient_id'), 'menu_item_ingredients', ['ingredient_id'], unique=False)
    op.create_index(op.f('ix_menu_item_ingredients_menu_item_id'), 'menu_item_ingredients', ['menu_item_id'], unique=False)
    op.create_table('order_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False, comment='Reference to order'),
    sa.Column('menu_item_id', sa.Integer(), nullable=False, comment='Reference to menu item'),
    sa.Column('quantity', sa.Integer(), nullable=False, comment='Quantity of the menu item'),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Price per unit at time of order'),
    sa.Column('total_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total price for this line item (quantity * unit_price)'),
    sa.Column('special_instructions', sa.String(length=255), nullable=True, comment='Special instructions for this specific item'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the order item was created'),
    sa.CheckConstraint('quantity <= 10', name='ck_order_item_quantity_max'),
    sa.CheckConstraint('quantity > 0', name='ck_order_item_quantity_positive'),
    sa.CheckConstraint('total_price = quantity * unit_price', name='ck_order_item_total_price_calculation'),
    sa.CheckConstraint('total_price >= 0', name='ck_order_item_total_price_positive'),
    sa.CheckConstraint('unit_price >= 0', name='ck_order_item_unit_price_positive'),
    sa.ForeignKeyConstraint(['menu_item_id'], ['menu_items.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_items_id'), 'order_items', ['id'], unique=False)
    op.create_index(op.f('ix_order_items_menu_item_id'), 'order_items', ['menu_item_id'], unique=False)
    op.create_index(op.f('ix_order_items_order_id'), 'order_items', ['order_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_order_items_order_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_menu_item_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_id'), table_name='order_items')
    op.drop_table('order_items')
    op.drop_index(op.f('ix_menu_item_ingredients_menu_item_id'), table_name='menu_item_ingredients')
    op.drop_index(op.f('ix_menu_item_ingredients_ingredient_id'), table_name='menu_item_ingredients')
    op.drop_index(op.f('ix_menu_item_ingredients_id'), table_name='menu_item_ingredients')
    op.drop_table('menu_item_ingredients')
    op.drop_index(op.f('ix_menu_items_restaurant_id'), table_name='menu_items')
    op.drop_index(op.f('ix_menu_items_name'), table_name='menu_items')
    op.drop_index(op.f('ix_menu_items_id'), table_name='menu_items')
    op.drop_index(op.f('ix_menu_items_category_id'), table_name='menu_items')
    op.drop_table('menu_items')
    op.drop_index(op.f('ix_inventory_ingredient_id'), table_name='inventory')
    op.drop_index(op.f('ix_inventory_id'), table_name='inventory')
    op.drop_table('inventory')
    op.drop_index(op.f('ix_tags_restaurant_id'), table_name='tags')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_orders_user_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_restaurant_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_ingredients_restaurant_id'), table_name='ingredients')
    op.drop_index(op.f('ix_ingredients_name'), table_name='ingredients')
    op.drop_index(op.f('ix_ingredients_id'), table_name='ingredients')
    op.drop_table('ingredients')
    op.drop_index(op.f('ix_categories_restaurant_id'), table_name='categories')
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    op.drop_index(op.f('ix_users_phone'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index('ix_users_email_active', table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_restaurants_name'), table_name='restaurants')
    op.drop_index(op.f('ix_restaurants_id'), table_name='restaurants')
    op.drop_table('restaurants')
    # ### end Alembic commands ###
